{"title":"MySQL联合索引和最左前缀原则理解一","uid":"6256a2c967d4226dbb5b05689bfb7d23","slug":"最左前缀","date":"2021-03-11T08:45:25.000Z","updated":"2023-10-18T01:53:17.946Z","comments":true,"path":"api/articles/最左前缀.json","keywords":"博客,后端,Java,算法,分布式,微服务,架构,业务开发,数据库,中间件,敏捷,管理,DDD,领域驱动设计,设计模式,搜索,消息队列","cover":[],"content":"<p>如果给 user 表中的 username pwd 字段创建了复合索引那么使用以下SQL 都是可以命中索引:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select username from user where username&#x3D;&#39;zhangsan&#39; and pwd &#x3D;&#39;axsedf1sd&#39;\n\nselect username from user where pwd &#x3D;&#39;axsedf1sd&#39; and username&#x3D;&#39;zhangsan&#39;\n\nselect username from user where username&#x3D;&#39;zhangsan&#39;</code></pre>\n\n<p>但是使用</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select username from user where pwd &#x3D;&#39;axsedf1sd&#39;</code></pre>\n\n<p>是不能命中索引的。</p>\n<p>上面是从<a href=\"https://crossoverjie.top/JCSprout/#/db/SQL-optimization?id=%e6%9c%80%e5%b7%a6%e5%89%8d%e7%bc%80%e9%97%ae%e9%a2%98\">最左前缀索引</a>这篇文章看到的</p>\n<h2 id=\"为什么select-username-from-user-where-pwd-39-axsedf1sd-39-and-username-39-zhangsan-39-会走索引？\"><a href=\"#为什么select-username-from-user-where-pwd-39-axsedf1sd-39-and-username-39-zhangsan-39-会走索引？\" class=\"headerlink\" title=\"为什么select username from user where pwd =&#39;axsedf1sd&#39; and username=&#39;zhangsan&#39;会走索引？\"></a>为什么<code>select username from user where pwd =&#39;axsedf1sd&#39; and username=&#39;zhangsan&#39;</code>会走索引？</h2><p>因为mysql优化器对联合索引，等值条件、and条件有优化，会调整顺序。</p>\n<p>扩展：可以进一步看看优化器相关知识，更好的了解优化器的行为</p>\n<h2 id=\"Using-where-Using-index是什么意思？\"><a href=\"#Using-where-Using-index是什么意思？\" class=\"headerlink\" title=\"Using where; Using index是什么意思？\"></a>Using where; Using index是什么意思？</h2><p>使用explain分析下面这个语句</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">EXPLAIN select username from user where pwd &#x3D;&#39;axsedf1sd&#39;</code></pre>\n\n<p>得到的结果如下：</p>\n<p><img src=\"https://gitee.com/jinxin.70/oss/raw/master/uPic/image-20210311163448369_2021_03_11_16_34_48.png\" alt=\"image-20210311163448369\"></p>\n<p>看到type是index，Extra是<code>Using where; Using index</code></p>\n<h3 id=\"type是index表示什么意思？\"><a href=\"#type是index表示什么意思？\" class=\"headerlink\" title=\"type是index表示什么意思？\"></a>type是index表示什么意思？</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>type列表示存储引擎查询数据时采用的方式。比较重要的一个属性，通过它可以判断出查询是全表扫描还 是基于索引的部分扫描。常用属性值如下，从上至下效率依次增强。</p>\n<ul>\n<li>ALL：表示全表扫描，性能最差。</li>\n<li>index：表示基于索引的全表扫描，先扫描索引再扫描全表数据。</li>\n<li>range：表示使用索引范围查询。使用&gt;、&gt;=、&lt;、&lt;=、in等等。</li>\n<li>ref：表示使用非唯一索引进行单值查询。</li>\n<li>eq_ref：一般情况下出现在多表join查询，表示前面表的每一个记录，都只能匹配后面表的一 行结果。</li>\n<li>const：表示使用主键或唯一索引做等值查询，常量查询。</li>\n<li>NULL：表示不用访问表，速度最快。</li>\n</ul></blockquote>\n<p>可以看到，type是index，效率不好</p>\n<h3 id=\"Using-where-Using-index是什么意思\"><a href=\"#Using-where-Using-index是什么意思\" class=\"headerlink\" title=\"Using where; Using index是什么意思\"></a>Using where; Using index是什么意思</h3><p>表示在索引树上包括要查找的列，但是不能按照顺序查找到，必须通过条件筛选</p>\n<h3 id=\"什么是”走索引”？\"><a href=\"#什么是”走索引”？\" class=\"headerlink\" title=\"什么是”走索引”？\"></a>什么是”走索引”？</h3><p>如果Extra只有Using index，表示索引树上有要查找的列，并且可以按照顺序查找到。也就是常说的”走索引”的意思</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>常说的”走索引”，用explain分析后，Extra列的值是<code>Using index</code>，而<code>Using where;Using index</code>不走索引</p>\n</li>\n<li><p><code>Using where;Using index</code>表示不走索引，索引树上能够扫描到要查找的列，但是<strong>不能按照顺序查找到，只能按照筛选条件查找</strong></p>\n</li>\n<li><p>“走索引”的意思是，要查找的列在索引树上可以扫描到，并且是可以<strong>按照索引顺序</strong>查找到。</p>\n</li>\n</ul>\n","feature":true,"text":"如果给 user 表中的 username pwd 字段创建了复合索引那么使用以下SQL 都是可以命中索引: select username from user where username&#x3D;&#39;zhangsan&#39; and pwd &#x3D;&#39;a...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/categories/MySQL.json"},{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"},{"name":"数据库调优","slug":"数据库调优","count":1,"path":"api/tags/数据库调优.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88select-username-from-user-where-pwd-39-axsedf1sd-39-and-username-39-zhangsan-39-%E4%BC%9A%E8%B5%B0%E7%B4%A2%E5%BC%95%EF%BC%9F\"><span class=\"toc-text\">为什么select username from user where pwd &#x3D;&#39;axsedf1sd&#39; and username&#x3D;&#39;zhangsan&#39;会走索引？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Using-where-Using-index%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\"><span class=\"toc-text\">Using where; Using index是什么意思？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#type%E6%98%AFindex%E8%A1%A8%E7%A4%BA%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\"><span class=\"toc-text\">type是index表示什么意思？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Using-where-Using-index%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D\"><span class=\"toc-text\">Using where; Using index是什么意思</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E2%80%9D%E8%B5%B0%E7%B4%A2%E5%BC%95%E2%80%9D%EF%BC%9F\"><span class=\"toc-text\">什么是”走索引”？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"插入排序","uid":"f2ea62009b2a302d5e2076e5efd27611","slug":"插入排序","date":"2021-03-16T11:28:01.000Z","updated":"2023-10-18T01:53:17.946Z","comments":true,"path":"api/articles/插入排序.json","keywords":"博客,后端,Java,算法,分布式,微服务,架构,业务开发,数据库,中间件,敏捷,管理,DDD,领域驱动设计,设计模式,搜索,消息队列","cover":[],"text":"前要回顾前面我们提供了一个对数据排序的方案，是选择排序。 排序的过程，回顾一下。 如果要对数组进行从小到大排序，选择排序怎么做呢？ 我们对数组的每个位置进行遍历，举个例子： 比如一开始，第一个位置，我们要放置最小的元素到这个位置，于是从所有元素中选择一个最小的。然后和第一个位置的...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":3,"path":"api/categories/Algorithm.json"},{"name":"C++","slug":"C","count":3,"path":"api/categories/C.json"}],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"},{"name":"C++","slug":"C","count":3,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"动态代理","uid":"6b9ce45aac70d77e5b13dbe67f0c2d3a","slug":"动态代理","date":"2021-02-14T08:16:34.000Z","updated":"2023-10-18T01:53:17.945Z","comments":true,"path":"api/articles/动态代理.json","keywords":"博客,后端,Java,算法,分布式,微服务,架构,业务开发,数据库,中间件,敏捷,管理,DDD,领域驱动设计,设计模式,搜索,消息队列","cover":[],"text":"可以干什么 可以在运行时动态创建一个类，实现一个或多个接口，可以在不修改原有类的基础上动态为通过该类获取的对象添加方法、修改行为（增强） 动态代理是实现面向切面编程AOP的基础 AOP可以干什么？ 日志、性能监控、权限检查、数据库事务 AOP切面通过将切面逻辑和主体逻辑分离，使代...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":2,"path":"api/categories/Java.json"},{"name":"动态代理","slug":"动态代理","count":1,"path":"api/categories/动态代理.json"}],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"动态代理","slug":"动态代理","count":1,"path":"api/tags/动态代理.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}